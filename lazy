#include<bits/stdc++.h>
using namespace std;

#define ll long long
#define el '\n'

const int len = 1e5 + 7, inf = 1e9 + 7;

struct node{
    int val, lazy;
} tree[len << 2];

int n, q, a[len];

void build(int id, int l, int r){
    if(l == r){
        tree[id].val = a[l];
        return;
    }
    int m = l + r >> 1;

    build(id << 1, l, m);
    build(id << 1 | 1, m + 1, r);

    tree[id] = min(tree[id << 1], tree[id << 1 | 1]);
}

void down(int id){
    int t = tree[id].lazy;

    tree[id << 1].val += t;
    tree[id << 1].lazy += t;

    tree[id << 1 | 1].lazy += t;
    tree[id << 1 | 1].val += t;

    tree[id].lazy = 0;
}

void update(int id, int l, int r, int u, int v, int w){
    if(v < l || r < u) return;
    if(u <= l && r <= v){
        tree[id].lazy += w;
        tree[id].val += w;
        return;
    }

    down(id);
    int m = l + r >> 1;
    update(id << 1, l, m, u, v, w);
    update(id << 1 | 1, m + 1, r, u, v, w);

    tree[id].val = min(tree[id << 1].val, tree[id << 1 | 1].val);
}

int get(int id, int l, int r, int u, int v){
    if(v < l || r < u) return inf;
    if(u <= l && r <= v) return tree[id].val;

    int m = l + r >> 1;

    return min(get(id << 1, l, m, u, v), get(id << 1 | 1, m + 1, r, u, v));
}

int main(){
    ios_base::sync_with_stdio(0);
    cin.tie(0);

    cin >> n >> q;

    for(int i = 1; i <= n; i++) cin >> a[i];

    build(1,1,n);

    while(q--){
        int num; cin >> num;

        if(num&1){
            int u, v, w;
            cin >> u >> v >> w;
            update(1, 1, n, u, v, w);
        }
        else{
            int l, r;
            cin >> l >> r;
            cout << get(1, 1, n, l, r) << el;
        }
    }

    return 0;
}
